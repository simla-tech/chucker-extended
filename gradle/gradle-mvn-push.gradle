apply plugin: 'maven-publish'
apply plugin: 'signing'

def versionName = "1.0-SNAPSHOT"

publishing {
    publications {
        release(MavenPublication) {
            groupId = 'com.simla.android.chucker'
            version = versionName

            afterEvaluate {
                from components.release
            }
            artifactId = project.name

            pom {
                name = 'Chucker Extended'
                description = 'Fork of Chucker with additional WebSocket traffic tracking'
                url = 'https://github.com/simla-tech/chucker-extended'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'SimlaTech'
                        name = 'Simla Mobile Dev Team'
                        email = findProperty("simlaTechEmail") ?: System.getenv("SIMLA_TECH_EMAIL")
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/simla-tech/chucker-extended.git'
                    developerConnection = 'scm:git:ssh://github.com/simla-tech/chucker-extended.git'
                    url = 'https://github.com/simla-tech/chucker-extended'
                }
            }
        }
    }
    repositories {
        maven {
            name = "main"
            url "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            credentials {
                username = findProperty("ossrhUsername") ?: System.getenv("OSSRH_USERNAME")
                password = findProperty("ossrhPassword") ?: System.getenv("OSSRH_PASSWORD")
            }
        }
        maven {
            name = 'local'
            url = "${findProperty("localMavenPath")}"
        }
    }
}

signing {
    def signingKeyId = findProperty("signingKeyId") ?: System.getenv("SIGNING_KEY_ID")
    def signingKey = findProperty("signingKey") ?: System.getenv("SIGNING_KEY")
    def signingPassword = findProperty("signingKeyPassword") ?: System.getenv("SIGNING_KEY_PASSWORD")
    useInMemoryPgpKeys(signingKeyId, signingKey, signingPassword)
    sign publishing.publications.release
}
